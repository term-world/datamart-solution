# TODOs

- office/reflection.md:
  - description: No TODO markers left in reflection.md
    category: Reflection
    check: MatchFileFragment
    options:
      fragment: "TODO"
      count: 0
      exact: true
- builder/data_creator.py:
  - description: No TODO markers left in data_creator.py
    category: Creator Commissions
    check: MatchFileFragment
    options:
      fragment: "TODO"
      count: 0
      exact: true
- builder/table_builder.py:
  - description: No TODO markers left in table_builder.py
    category: Builder Business
    check: MatchFileFragment
    options:
      fragment: "TODO"
      count: 0
      exact: true
- arranger/table_arranger.py:
  - description: No TODO markers left in table_arranger.py
    category: Arranger Assignments
    check: MatchFileFragment
    options:
      fragment: "TODO"
      count: 0
      exact: true
- analyzer/table_analyzer.py:
  - description: No TODO markers left in table_analyzer.py
    category: Analyzer Activities
    check: MatchFileFragment
    options:
      fragment: "TODO"
      count: 0
      exact: true

# Existential file crisis
- builder/data/registry.csv:
  - description: registry.csv file exists in builder/data/registry.csv
    category: Creator Commissions
    check: ConfirmFileExists
- builder/data/registry.csv:
  - description: table columns are in the order requested by the README
    category: Builder Business
    check: MatchFileRegex
    options:
      regex: '[ID|id|Id],[N|n]eighborhood,[N|n]ame'
      count: 1
      exact: true

# Reflection data

- office/reflection.md:
  - description: All questions answered in reflection.md
    category: Reflection
    check: CountFileParagraphs
    options:
      count: 6
      exact: false

# Code cops

# lists
- builder/data_creator.py:
  - description: builder/data_creator.py creates an additional empty list
    category: Creator Commissions
    check: MatchFileRegex
    options:
      regex: '=(\s)?\[\]'
      count: 2
      exact: true
- builder/data_creator.py:
  - description: builder/data_creator.py features a list that uses the .append method
    category: Creator Commissions
    check: MatchFileRegex
    options:
      regex: '\.append\([a-zA-Z0-9_]+\)'
      count: 1
      exact: true
- builder/data_creator.py:
  - description: builder/data_creator.py features a list that uses add_names function
    category: Creator Commissions
    check: MatchFileRegex
    options:
      regex: 'add_names\([a-zA-Z0-9_]+\)'
      count: 1
      exact: true
- builder/table_builder.py:
  - description: builder/table_builder.py uses the DATA list to add to table
    category: Builder Business
    check: MatchFileRegex
    options:
      regex: 'DATA\[[a-zA-Z0-9\-\s_]+\]'
      count: 1
      exact: false
- builder/table_builder.py:
  - description: builder/table_builder.py appends to the COLS variable when adding columns
    category: Builder Business
    check: MatchFileRegex
    options:
        regex: 'COLS\.append\([a-zA-Z0-9_]+\)'
        count: 1
        exact: false
- builder/table_builder.py:
  - description: builder/table_builder.py uses the pop() method to remove from row and/or column
    category: Builder Business
    check: MatchFileRegex
    options:
        regex: '\.pop\(\)'
        count: 1
        exact: false
- arranger/table_arranger.py:
  - description: arranger/table_arranger.py uses the index method to retrieve list addresses
    category: Arranger Assignments
    check: MatchFileRegex
    options:
      regex: '\.index\([a-zA-Z0-9_]+\)'
      count: 3
      exact: false
- analyzer/table_analyzer.py:
  - description: analyzer/table_analyzer.py uses the len() function to compute averages
    category: Analyzer Activities
    check: MatchFileRegex
    options:
      regex: 'len\([a-zA-Z0-9_]+\)'
      count: 1
      exact: false

# Iteration

- arranger/table_arranger.py:
  - description: arranger/table_arranger.py uses a for loop with the DATA variable to switch columns
    category: Arranger Assignments
    check: MatchFileRegex
    options:
      regex: 'for [a-zA-Z0-9_]+ in DATA\:'
      count: 1
      exact: false
- analyzer/table_analyzer.py:
  - description: analyzer/table_analyzer.py uses for loops with the DATA variable to discover data
    category: Analyzer Activities
    check: MatchFileRegex
    options:
      regex: 'for [a-zA-Z0-9_]+ in DATA\:'
      count: 3
      exact: false

# functions
- builder/table_builder.py:
  - description: builder/table_builder.py implements a function called add_column with 1 parameter
    category: Builder Business
    check: MatchFileRegex
    options:
      regex: 'def add_column\([a-zA-Z0-9_\:\s"=]+\)(.*)?\:'
      count: 1
      exact: true
- builder/table_builder.py:
  - description: builder/table_builder.py calls add_column with 1 argument
    category: Builder Business
    check: MatchFileRegex
    options:
      regex: 'add_column\([a-zA-Z0-9_]+\)(?!(\s)?\:)'
      count: 1
      exact: true
- builder/table_builder.py:
  - description: builder/table_builder.py implements a function called get_row with 1 parameter
    category: Builder Business
    check: MatchFileRegex
    options:
      regex: 'def get_row\([a-zA-Z0-9_\:\s"=]+\)(.*)?\:'
      count: 1
      exact: true
- builder/table_builder.py:
  - description: builder/table_builder.py calls add_column with 1 argument
    category: Builder Business
    check: MatchFileRegex
    options:
      regex: 'get_row\([a-zA-Z0-9_]+\)(?!(\s)?\:)'
      count: 1
      exact: true
- builder/table_builder.py:
  - description: builder/table_builder.py implements a function called add_to_row with 2 parameters
    category: Builder Business
    check: MatchFileRegex
    options:
      regex: 'def add_to_row\([a-zA-Z0-9_\:\s"=]+,(\s)?[a-zA-Z0-9_\:\s"=]+\)(.*)?\:'
      count: 1
      exact: true
- builder/table_builder.py:
  - description: builder/table_builder.py calls add_to_row with 2 arguments
    category: Builder Business
    check: MatchFileRegex
    options:
      regex: 'add_to_row\([a-zA-Z0-9_]+,(\s)?[a-zA-Z0-9_]+\)'
      count: 1
      exact: true
- builder/table_builder.py:
  - description: builder/table_builder.py implements a function called remove_from_row with 1 parameter
    category: Builder Business
    check: MatchFileRegex
    options:
      regex: 'def remove_from_row\([a-zA-Z0-9_\:\s"=]+\)(.*)?\:'
      count: 1
      exact: true
- builder/table_builder.py:
  - description: builder/table_builder.py calls add_column with 1 argument
    category: Builder Business
    check: MatchFileRegex
    options:
      regex: 'add_column\([a-zA-Z0-9_]+\)(?!(\s)?\:)'
      count: 1
      exact: true
- arranger/table_arranger.py:
  - description: arranger/table_arranger.py implements a switch_columns function with 2 parameters
    category: Arranger Assignments
    check: MatchFileRegex
    options:
      regex: 'def switch_columns(\s)?\([a-zA-Z0-9_\:\s"=]+,(\s)?[a-zA-Z0-9_\:\s"=]+\)(.*)?\:'
      count: 1
- arranger/table_arranger.py:
  - description: arranger/table_arranger.py calls switch_columns with 2 arguments
    category: Arranger Assignments
    check: MatchFileRegex
    options:
      regex: 'switch_columns\([a-zA-Z0-9_]+,(\s)?[a-zA-Z0-9_]+\)'
      count: 1
      exact: true
- arranger/table_arranger.py:
  - description: arranger/table_arranger.py calls the sorter function with one argument
    category: Arranger Assignments
    check: MatchFileRegex
    options:
      regex: 'sorter\([a-zA-Z0-9_]+\)'
      count: 1
- analyzer/table_analyzer.py:
  - description: analyzer/table_analyzer.py implements a counter function with 1 parameter
    category: Analyzer Activities
    check: MatchFileRegex
    options:
      regex: 'def counter(\s)?\([a-zA-Z0-9_\:\s"=]+\)(.*)?\:'
      count: 1
- analyzer/table_analyzer.py:
  - description: analyzer/table_analyzer.py calls the counter function with one argument
    category: Analyzer Activities
    check: MatchFileRegex
    options:
      regex: 'counter\([a-zA-Z0-9_]+\)'
      count: 1
- analyzer/table_analyzer.py:
  - description: analyzer/table_analyzer.py implements a avg_column function with 1 parameter
    category: Analyzer Activities
    check: MatchFileRegex
    options:
      regex: 'def avg_column(\s)?\([a-zA-Z0-9_\:\s"=]+\)(.*)?\:'
      count: 1
- analyzer/table_analyzer.py:
  - description: analyzer/table_analyzer.py calls the avg_column function with one argument
    category: Analyzer Activities
    check: MatchFileRegex
    options:
      regex: 'avg_column\([a-zA-Z0-9_]+\)'
      count: 1
- analyzer/table_analyzer.py:
  - description: analyzer/table_analyzer.py implements a max_value function with 1 parameter
    category: Analyzer Activities
    check: MatchFileRegex
    options:
      regex: 'def max_value(\s)?\([a-zA-Z0-9_\:\s"=]+\)(.*)?\:'
      count: 1
- analyzer/table_analyzer.py:
  - description: analyzer/table_analyzer.py calls the max_value function with one argument
    category: Analyzer Activities
    check: MatchFileRegex
    options:
      regex: 'max_value\([a-zA-Z0-9_]+\)'
      count: 1